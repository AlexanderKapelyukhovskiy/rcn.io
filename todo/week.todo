Today
 - build a grid
 	+- tweak columns so they are better multplies of...: https://github.com/twbs/bootstrap/issues/13120
 	+- pick number of columns and gutter size
 	+- see if we should use fluid ui
 	- consider use of all 16 columns for calendar (more space for cards)
 +-- build basic Bootstrap components
 	+- row
 	+- column
 	+- mb use cusom gutters per breakpiont: https://github.com/twbs/bootstrap/issues/11873

 - setup typographic scale
 	+- setup body scale
 	+- setup header scale
 	+- combine two above scales into one
 	+- try lato line height of 1.36 on fonts selection branch: as per http://www.imarc.com/blog/750-
 	+- try horizontal guidelines like here: http://goldilocksapproach.com/demo/
 	using_the_golden_ratio_with_typography
 	+- try with font's selected: text-rendering: optimizeLegibility;
 		+- on fonts branch
 		+- lato specifically
 	+- see if we need to set rems to match whole pixels like here (http://beta.gridlover.net/projects/74): currently we calculate it with SASS
 - setup icons
 	- pick icons
 	- set them up
 -- CSS
 	- comile bootstrap and use compiled version
 	- add Autoprefixer
 	- extract boostrap to separate branch/folder so we can tweak, compile and reuse
 	- should be able to run compile in one simple command and get updated version of CSS in a project ready to be commited
 	- setup PostCSS with SASS-like plugins
 		- compare compilation time to SASS
 	- add Autoprefixer
 	--- design a card UI
 		---- immidiate todo
 			+- round height to nearest multiple of line height
 			- for distance make badge to have different size depending how long is the race
 			+-- create square (2px rounding) badge variation
 			- adaptive Event card or different components?: what is easier to maintain?
 				- e.g. we need to show UI of the card differently based on size: the sizes can be pre-defined though
 					- text should be moved down proprotionally to card size
 					- try Roboto Condensed
 					- try Open Sans Condensed
 					- try Oswald
 			- set assymetric padding (less on the sides, more from top to preserve the rythm)
 			- adopt flexbox
 			- play with vh vw (veiwport related sizes) for card size
 			- create variations with text shadow on badges: text-shadow: 0 1px 0 rgba(0,0,0,.2);
 			-- create a 1-2 line card design, so we can show non-important events for imporant days this way: 
 				say we have a Sat which takes 4 culumns and we only interested in 1/3 events, there is no reason to show them full-size
 				- inspiration can be taked from TargetProcess: http://screencast.com/t/HpOkrTbi4ot
 			- create variation with different width of left colorful section (used to show event type)
 				- try really wide option that would also group event-type specific information: e.g. distance for RR, duration for crit, etc (http://screencast.com/t/ABpTSbxzP)
 		- if calendar is going to take the whole page space, rethink 16 columns (this is easy)
 		- play with adaptive sizes: https://projects.invisionapp.com/d/main#/console/1638951/114305230/preview
 		-- make it responsive in React
 			- http://wicky.nillia.ms/enquire.js/: and a wrapper https://github.com/akiran/react-responsive-mixin
 		- use this from material UI for multiday events: http://screencast.com/t/NrvJMSHEJX (http://material-ui.com/#/components/lists)
 		- make better implementation of faded text, when text is too long: current one is not ideal and has few bugs
 			-- idea 1: mb use string.length to approximate if text fits
 			----- bug: overlay is shown when text doesn't actually have more lines left
 			----- bug: overlay is shown all the time, event when text is super-short
 			-- idea 2: make cards to take more vertical space
 			-- idea 3: make text smaller
 			-- idea 4: fade text vertically, top to bottom, this makes it more obvious that there is more to read
 			--- idea 5: try monspace font like so it's easy to calculate exact text length
 				- options on Google Fonts:
 					- Roboto Mono (10 variations nice!, 13px point size for 10px font)
 					- Inconsolata (2 variations, but more condensed, 16px point size for 10px font)
 					- Source Code Pro (7 variations, 13px point size for 10px font)
 					- Fira Mono (2 variations, 16px point size for 10px font)
 			- it would be nicer to have overlay + "..."
 		- for one-column cards try really small text size: better then nothing
 		-- what if we go Apple Watch Style for card UI: e.g. we can use space more efficiently if we show circles around circles http://screencast.com/t/JajByOsfhtm

Mobile support
 - responsive font scale read: http://typecast.com/blog/a-more-modern-scale-for-web-typography

After Boilerplate setup
	- setup Git worflow effective for our team
		- proposed setup 1 (Github Flow)
			- leave master as production branch
				- do not commit on master directly
				- master is always deploayble
			- use dev branch for ongoing development: merge it to prod when deploy is needed
			- use feature branches for bigger features
		- proposed setup 2: https://about.gitlab.com/2014/09/29/gitlab-flow/
			- use production branch
			- work on master + feature branches
	- setup render vizualizer: https://github.com/spredfast/react-transform-render-visualize
	-- CI
		- setup mocha
			- write simple test for css class transforms
		- setup travis CI
			- use https://buildtimetrend.herokuapp.com/ for build time trends
	-- atoms (UI)
	-- webpack
		- setup url loader (see etse)
		- extract text plugin for CSS for prod
		- autoprefixer
		- Scoping hot loader only to components directory: see if it's even an option and if it would speed up incremental rebuild times as mentioined here https://github.com/webpack/webpack/issues/1574
		- investigate if css-loader makes a difference: https://github.com/webpack/css-loader/issues/124
			- css-loader url=false (for dev?): https://github.com/jtangelder/sass-loader/issues/176#issuecomment-151565911
		- investigate how CSS affect build times:there is some evidence that "how you structure CSS" affects build times (https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538) https://github.com/jtangelder/sass-loader/issues/176
		- decide which of 3 ways of loading css we should use: https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538

	- consider "react-document-title" package
	-- Redux
		- condiser simpler actions as next step: https://github.com/pauldijou/redux-act
	-- server
	    - setup server side rendering like in este
			- este uses react component to render HTML document called 'html.react.js'
		- setup server for API and hot reload combined (like estejs)
		- setup compression middleware (like estejs)
		- make sure hot reloading server is not runing on prod
		- setup Relay and GraphQL from examples
		- setup logging and colorful logger
		- setup middlewares
		- setup error handler and API request logger middleware
		-- Setup Relay
			- example: https://github.com/fortruce/relay-skeleton
	- setup other react stuff from este.js
			- make all components pure
			- figure out how to make function component pure

After After Boilerplate =)
	- figure out how to make Funtional Components Pure (pure Render mixin?)
	- move webpack config to be ES6
	-- play with Browserify, this claims it super-fast for rebuilding: http://christianalfoni.github.io/javascript/2014/08/29/choosing-the-correct-packaging-tool-for-react-js.html
		- hot-reload: https://github.com/milankinen/livereactload
		- browserify for webpack users: https://gist.github.com/substack/68f8d502be42d5cd4942


Pre-production
-- Webpack related
	- currently index.html for prod: doesn't include js and css files bundled
		-- setup Server Side rendering like etse js
		- consider setup auto-index html: https://github.com/ampedandwired/html-webpack-plugin
			- also has nice example of usage of HTML Webpack Plugin: https://github.com/mxstbr/react-boilerplate/blob/master/makewebpackconfig.js
		- or take approach with node server that just uses: index.js as enry point and all html is generated by react
			- read this related https://github.com/webpack/webpack/issues/536
	- setup hashes for output: like assets/bundle.[hash].js
	- setup minifications of js, css and html
		- one of the prod config examples with html minification: https://github.com/mxstbr/react-boilerplate/blob/master/makewebpackconfig.js
	- enable React compiler optimizations (Babel 5.8.24): https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#compiler-optimizations
- make sure we load only required Lato and Oswald variations

Not Today 
	-- Github
		- setup Changelog Generator https://github.com/skywinder/Github-Changelog-Generator
	-- Tweak Bootstrap
		- consider WFT-Form feilds http://wtfforms.com/
		- setup different gutter per breakpoint: https://github.com/twbs/bootstrap/issues/11564
		- setup larger breakpoint to support really wide displays
	-- Fonts and Typography
		- Try Bebas Neue instead of Oswald
		- try LEAGUE GOTHIC instead of Oswald (OSS font   )
		- use larger base font size for hi-dpi displays with low device-pixel ratio: e.g. my 25" 2500x1440 display qualifies, my retina macbook doesn't. 14px font looks larger on mac and smaller on mentioned monitor
	-- SVG and Icons
		- use IcoMoon to convert font's to SVG
		- combine SVG to a sprite and user refs
			- https://github.com/kisenka/svg-sprite-loader
			- https://github.com/mrsum/webpack-svgstore-plugin
		- user <sybmbol> instead of <g>: https://css-tricks.com/svg-symbol-good-choice-icons/
	- print about Flux https://pbs.twimg.com/media/CDyAQ-BW0AESYP1.png
	- go through simple Redux eample: https://github.com/jackielii/simplest-redux-example/blob/master/index.js
	- setup webpack for dev
		- and nyan loader like in este
	- play with date for humans: https://github.com/matthewmueller/date
	- play with X-Ray (for scraping): https://github.com/lapwinglabs/x-ray


Public Mail Page
 - consider this for engaging animation: http://animaticons.co/downloads/essential-plus/, there is nice calendar and map icons

Before 1.0 Release 
	- use web-loader to for fonts: https://github.com/typekit/webfontloader
	woould allow to prevent FOUT (Before 1.0 Release 
	https://github.com/typekit/webfontloader), test it with artificial trottling
	- review TimeKit: [Timekit](http://timekit.io/) - availability and scheduling API


Webpack Times
	-- CodePen to calculate avg times: http://codepen.io/Restuta/pen/ZbLqyX?editors=101
	- avg rebuild times
		- node 4.1.1 and npm 2.14.4: 245ms
		- node 4.1.1 and npm 3.3.4: 209ms - 227ms
	- boostrap SASS adds ~600ms to rebuild times



Done
	+- finish basic setup of hot reload boilerplate
		+- eslint
		+- add css/sass processing: monitor rebuild times
			+- configur sass to be expanded for dev
		+- add Bootstrap 
			+- try BS4 and non-compiled version, see if it adds a lot of overhead: in terms of compilation time
		+- setup react 0.14
		
		+- static index.html for now (server side render later)
	+- move boilerplate under rcn.io
		- rename stuff in package.json
	+!- upgrade to react 0.14 
