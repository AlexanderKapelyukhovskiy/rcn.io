Today
 - build a grid
 	+- tweak columns so they are better multplies of...: https://github.com/twbs/bootstrap/issues/13120
 	+- pick number of columns and gutter size
 	+- see if we should use fluid ui
 +-- build basic Bootstrap components
 	+- row
 	+- column
 	+- mb use cusom gutters per breakpiont: https://github.com/twbs/bootstrap/issues/11873
 - setup typographic scale
 - setup icons
 	- pick icons
 	- set them up
 -- CSS
 	- comile bootstrap and use compiled version
 	- add Autoprefixer
 	- extract boostrap to separate branch/folder so we can tweak, compile and reuse
 	- should be able to run compile in one simple command and get updated version of CSS in a project ready to be commited
 	- setup PostCSS with SASS-like plugins
 		- compare compilation time to SASS
 	- add Autoprefixer


After Boilerplate setup
	- setup Git worflow effective for our team
		- proposed setup 1 (Github Flow)
			- leave master as production branch
				- do not commit on master directly
				- master is always deploayble
			- use dev branch for ongoing development: merge it to prod when deploy is needed
			- use feature branches for bigger features
		- proposed setup 2: https://about.gitlab.com/2014/09/29/gitlab-flow/
			- use production branch
			- work on master + feature branches
	- setup render vizualizer: https://github.com/spredfast/react-transform-render-visualize
	-- CI
		- setup mocha
			- write simple test for css class transforms
		- setup travis CI
	-- atoms (UI)
		
	-- webpack
		- setup url loader (see etse)
		- extract text plugin for CSS for prod
		- autoprefixer
		- Scoping hot loader only to components directory: see if it's even an option and if it would speed up incremental rebuild times as mentioined here https://github.com/webpack/webpack/issues/1574
		- investigate if css-loader makes a difference: https://github.com/webpack/css-loader/issues/124
			- css-loader url=false (for dev?): https://github.com/jtangelder/sass-loader/issues/176#issuecomment-151565911
		- investigate how CSS affect build times:there is some evidence that "how you structure CSS" affects build times (https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538) https://github.com/jtangelder/sass-loader/issues/176
		- decide which of 3 ways of loading css we should use: https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538

	- consider "react-document-title" package
	-- server
	    - setup server side rendering like in este
			- este uses react component to render HTML document called 'html.react.js'
		- setup server for API and hot reload combined (like estejs)
		- setup compression middleware (like estejs)
		- make sure hot reloading server is not runing on prod
		- setup Relay and GraphQL from examples
		- setup logging and colorful logger
		- setup middlewares
		- setup error handler and API request logger middleware
		-- Setup Relay
			- example: https://github.com/fortruce/relay-skeleton
	- setup other react stuff from este.js
			- make all components pure
			- figure out how to make function component pure

After After Boilerplate =)
	- figure out how to make Funtional Components Pure (pure Render mixin?)
	- move webpack config to be ES6
	-- play with Browserify, this claims it super-fast for rebuilding: http://christianalfoni.github.io/javascript/2014/08/29/choosing-the-correct-packaging-tool-for-react-js.html
		- hot-reload: https://github.com/milankinen/livereactload
		- browserify for webpack users: https://gist.github.com/substack/68f8d502be42d5cd4942

Not Today 
	-- Tweak Bootstrap
		- consider wftform feilds http://wtfforms.com/
		- setup different gutter per breakpoint: https://github.com/twbs/bootstrap/issues/11564
	- print about Flux https://pbs.twimg.com/media/CDyAQ-BW0AESYP1.png
	- go through simple Redux eample: https://github.com/jackielii/simplest-redux-example/blob/master/index.js
	- setup webpack for dev
		- and nyan loader like in este
	- setup webpack for production
		- currently index.html for prod: doesn't include js and css files bundled
			-- setup Server Side rendering like etse js
			- consider setup auto-index html: https://github.com/ampedandwired/html-webpack-plugi
			- or take approach with node server that just uses: index.js as enry point and all html is generated by react
				- read this related https://github.com/webpack/webpack/issues/536
		- setup hashes for output: like assets/bundle.[hash].js
	- play with date for humans: https://github.com/matthewmueller/date
	- play with X-Ray (for scraping): https://github.com/lapwinglabs/x-ray

Webpack Times
	-- CodePen to calculate avg times: http://codepen.io/Restuta/pen/ZbLqyX?editors=101
	- avg rebuild times
		- node 4.1.1 and npm 2.14.4: 245ms
		- node 4.1.1 and npm 3.3.4: 209ms - 227ms
	- boostrap SASS adds ~600ms to rebuild times


Done
	+- finish basic setup of hot reload boilerplate
		+- eslint
		+- add css/sass processing: monitor rebuild times
			+- configur sass to be expanded for dev
		+- add Bootstrap 
			+- try BS4 and non-compiled version, see if it adds a lot of overhead: in terms of compilation time
		+- setup react 0.14
		
		+- static index.html for now (server side render later)
	+- move boilerplate under rcn.io
		- rename stuff in package.json
	+!- upgrade to react 0.14 
