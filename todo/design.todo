Story
--- Major Topic
-- Todo
.- as rejected item
.-(as last item for conclusions)
- Note or final decision

Ideas
	- fill event cards with solid color: and show data with white color and it's shades
	- show additional info when event card is hovered: like on dribble and many other sites
	-- Card Ideas
		- flip-flop different card views like here http://semantic-ui.com/modules/shape.html
	-- Calendar + Ideas
		- higlight row and column on mouse hover in calendar
		- show "today"
		- show "time now" as a red line relative to a todays day
		- sort events by distance or start time?
		- higlight part of the vent descpription with the same color as on the side of the card: e.g. "Dunnigan Hills Road Race", "Road Race" will be higligted with red, same color as side of the card building mental picture that "red" means "Road Race"
		- try alignin cards of different sizes to a baseline http://screencast.com/t/BOjOXsj2bg: might be visually easier to scan

Design
--- Statements
	- From Design For Hackers
		- For the beginning designer, success is all about reducing variables. 
		+- About fonts
			.- Georgia for a sophisticated serif
			.- Helvetica for a clean and neutral design
			+ Lato for a friendly and "natural" look
			+- Europa from Typekit for headings (or Oswald for condensed)
				.- Aleo was designed as Slab Serif pair to lato: http://www.fontsquirrel.com/fonts/aleo
			.-- Raleway for a more modern geometric look
	- Writing Language: https://www.google.com/design/spec/style/writing.html#writing-language
--- Typography
	- Size 
		- 4:3 typescale (by David Kadavy), 5 7 9 12 16 21 28 37 50 67 89 111 148
		.-(used above) by typecast: 16, 18, 20, 22, 26, 32  http://typecast.com/images/uploads/modernscale.css
	- Body
 		- Lato: friendly and natural
 		.- Source Sans Pro: more condensed
 		.-Roboto Condensed: even more condensed
 			.-(condensed font is not a good options for cards, readability is important) 
 		.- Alegreya Sans: helen liked it
 		.- Raleway: modern, geometric
 		- Montserrat alternative to Proxima Nova
 			- excellent for headlines 
 			- no italics
 			- more alternatives https://www.typewolf.com/top-10-proxima-nova-and-gotham-alternatives
 	- Headings: 
 		-- Oswald: pairs with Lato well, condensed
 		.- Montserrat: for maybe other headings
 		+- Europa as a nice looking aletnative to Montserrat (Typekit): used by exposure.co
 			.- it's alsmost same as Lato in upper case
 		+- Use a smaller line-height than body text (e.g. 1.1)
 			- see how it fits to a baseline
 	- Contrast (from Google Paper): Text should maintain a minimum contrast ratio of at least 4.5:1 (calculated based on luminance values) for legibility. A ratio of 7:1 is preferred.
 	- Line length: 30 is ideal for short text, 60 for long.
--- Use Grid
	-- 14 columns
	- resolutions 2015
		- Desktop
			- 1440+: 25%
		- Laptop
		  -	1366x768: 16%-30%
		
--- Color
 	- pick one primary color and 2 shades of grey
 	- https://dribbble.com/shots/972836-Favorite-Color-Playoff/rebounds
--- Icons
	- consider create my own pack https://glyphter.com
--- CSS
 	.-(or PostCSS?) use SASS for pre-processing and main styles
 		- use Twbs 4 SASS
 	- Follow http://rscss.io/
 	- use Postcss for post-processing:condider Postcss to be running only in prod configuration if it takes dev-time
 		- use Autoprefixer
 		- consider CSS modules
 			- https://github.com/css-modules/css-modules
 		- hot wo set POST CSS project up
 			- http://ai.github.io/about-postcss/en/?full#54
 			- http://benfrain.com/breaking-up-with-sass-postcss/
 		- precss https://github.com/jonathantneal/precss: to use SASS like syntax
 	-- Create CSS guideline (practices) 
 		- can be taken from here: http://www.basscss.com/docs/guides/basics/
 		- consider Tachyons : (http://tachyons.io) - CSS for designing faster than the speed of light
 		- compare it to BS4
 	+- use REMS for fonts: this allows to easely change sizes for different devices and still follow same typegraphic scale
--- Good UI Datastories:http://www.goodui.org/

Tools
	--- Dev
		- Live Reload: Browser Sync
	--- Build
		- Keep Dependencies Up To date: https://david-dm.org/ember-cli/ember-cli
		- CodeClimate: automated code review https://codeclimate.com/
	--- Hosting
		.--(in future) Digital Ocean?
			- everything is manual including process management, and nginx setup
		+-- Heroku?
			- for now it's the fastest option
		.-- Amazon (AWS)?
		.-- Parse?


Architecture Design
	- UI
		--- React
			- use Pure components: line in etse.js
			- use react's 0.14 stateless function components 
			- consider React Resolver: https://github.com/ericclemmons/react-resolver
			- use React Motion for animations: https://github.com/chenglou/react-motion
				- or use Velocity React: https://github.com/twitter-fabric/velocity-react
			- modals
				- https://github.com/davidtheclark/react-aria-modal

	- Client App Architecture
		--- Redux
			- consider this https://github.com/pauldijou/redux-act
		- 	Relay/GraphQL?
	- Build Tools
		--- Webpack 
			-- For production
				+- disable react-transform: see https://github.com/gaearon/react-transform-hmr (It is up to you to ensure that the transform is not enabled when you compile the app in production mode.)
				+- use minified versions of 3rd party libs
					- React and other stuff with "resolve"
					- mb some external with "externals"
				- use webpack --display-exclude --config webpack.config.prod.js --json | analyze-bundle-size:
				allows to analize what contributes to bundle size
				+- add hashes to assets: http://survivejs.com/webpack_react/building_kanban/#adding-hashes-to-filenames
				+- setup CommonChunksPlugin: http://survivejs.com/webpack_react/building_kanban/#setting-up-commonschunkplugin-
				+- setup ExtractTextPlugin so css is loaded as separate file
				+- mb split app and vendor: https://christianalfoni.github.io/react-webpack-cookbook/Split-app-and-vendors.html
					- splitting improve time for returning users in case of update
					- non-splitting improves initial load time
				- setup PostCSS Nano pack: http://cssnano.co/
				+- do not use babel-loader's react-transform plugin and cacheDirectory 
			+.- (yes ES6 with babel-loader) - with ES6 modules or ES6 modules?: ES6 modules are coming in webpack2 https://github.com/webpack/webpack/pull/861, more on webpack + es6 http://www.jbrantly.com/es6-modules-with-typescript-and-webpack/ 
				+- webpack 1 can be used with Babel to use ES6 modules
					+-- does this mean that webpack understands transpiled code like it would understand commonJS one?
				.- (webpack + ES6 = love with babel-loader) 
			- inline styles for dev, normal for production: like https://github.com/este/este, inline in dev makes styles hot-reloadable
			+- style-loader for hot reloading
			- SVG optimization: https://github.com/imagemin/imagemin-svgo
	- AI
		- http://wit.ai
	- Search
		- Algolia: https://www.producthunt.com/tech/instantsearch-js-by-algolia, used by product hunt, really instant search

Project Setup
	- copy stuff from este.js
		- use immutable.js
			- Redux-Immutablejs: https://github.com/indexiatech/redux-immutablejs
			- how-to use with React: https://github.com/facebook/immutable-js/wiki/Immutable-as-React-state
