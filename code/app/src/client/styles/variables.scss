//colors (update matching ones in colors.js)
//number at the end means level of darkness =)
$grey-50: #FAFAFA;
$grey-100: #F5F5F5;
$grey-200: #EEEEEE;
$grey-300: #E0E0E0;
$grey-350: #D3D3D3; //lightgrey
$grey-400: #BDBDBD;
$grey-500: #9E9E9E;
$grey-600: #757575;
$bla: grey;
$grey-700: #616161;
$grey-800: #424242;


$blue-grey-50: #ECEFF1;
$blue-grey-100: #CFD8DC;
$blue-grey-200: #B0BEC5;

$blue-grey-300: #90A4AE;
$blue-grey-400: #78909C;
$blue-grey-500: #607D8B;
$blue-grey-600: #546E7A;
$blue-grey-700: #455A64;
$blue-grey-800: #37474F;
$blue-grey-900: #263238;


//Typography
@function getBaseFontSize() {
  //change in typography.js also
  @return 14;
}

@function getScale() {
  @return 1.3333;//perfect fourth
}

@function scaleUp($number) {
  $scale: getScale();
  $base-font-size: getBaseFontSize(); //plain number to use in calculation and not to mess with px to rem convertion

  $size: $base-font-size;

  @if $number == 1 {
    @return (round($size) / $base-font-size) + 0rem;
  }

  @for $i from 1 through $number - 1 {
    $size: $size * $scale;
  }

  $size-rems: (round($size) / $base-font-size) + 0rem;
  @return $size-rems;
}


//specific to lato and follows golden ratio based on http://www.imarc.com/blog/750-
$line-height: 1.36;
$base-line: round(getBaseFontSize() * $line-height);
//calculating ideal height in rems, but that rounds nicely to pixels
$line-height-rem: ($base-line / getBaseFontSize()) + 0rem;

//calculating small (one step down from base) font size
$font-size-sm: (round(getBaseFontSize() / getScale()) / getBaseFontSize()) + rem;
